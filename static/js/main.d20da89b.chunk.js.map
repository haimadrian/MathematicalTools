{"version":3,"sources":["common/history.js","view/utils/message-box/index.js","model/actions/euclidean-algorithm.js","view/actions/euclidean-algorithm/index.jsx","model/actions/gcd.js","model/actions/prime-factors.js","model/actions/lcm.js","view/actions/gcd-lcm-prime-factors/index.jsx","model/actions/euler.js","model/actions/gauss.js","view/actions/euler/index.jsx","model/actions/modular-equations.js","view/actions/modular-equations/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","ERROR","MessageBox","className","this","props","type","charAt","toUpperCase","slice","message","React","Component","padNumber","num","width","n","length","Array","join","vectorToString","arr","result","i","euclideanAlgorithm","a","b","aName","bName","uName","vName","aBackup","bBackup","isANeg","isBNeg","isSwap","Math","abs","c","prev","calculationSteps","curr","tempCurr","remainder","q","floor","u","v","value","e","EuclideanAlgorithmForm","handleSubmit","Number","state","console","log","String","showMessageBox","setState","gcd","messageType","bind","handleInputChange","setTimeout","event","target","checked","name","Fragment","onChange","required","onKeyDown","key","onClick","readOnly","actionsCount","explanation","primeFactors","push","sqrt","buckets","prevPrimeFactor","count","prime","factors","GCD_ALG_TYPE","PRIME_FACTORS_ALG_TYPE","lcm","algType","gcdResult","lcmValue","aPrimeFactors","bPrimeFactors","max","innerExplanation","pow","GcdLcmForm","id","map","option","eulerFunc","nums","gcdRes","eulerFormula","primeFactorRes","calculationHelper","currPrime","gaussSum","sqrtN","numsStack","eulerRes","replace","currNum","pop","EulerForm","parseEquation","equation","srcEquation","toLowerCase","replaceAll","indexOfX","indexOf","substr","indexOfEqual","indexOfBeginParentheses","indexOfMod","indexOfEndParentheses","solveEquation","equationItems","d","values","x0","k","xkBeforeMod","xk","solveEquations","equations","currEquation","currEquationItems","fixedEquation","m","littleAExplanation","littleMExplanation","calculationStepsHelper","bigMExplanation","bigMs","xIsEquations","newEquation","xIsValues","calculationStepsHelper2","x","currAi","currMi","currXi","DEFAULT_EQUATION","ModularEquationsForm","answer","toString","index","prevState","splice","removeEquation","addEquation","App","src","alt","history","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20da89b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport './index.css';\r\n\r\n// Let outsiders to use these as messageType parameter, so we will have the right css used.\r\nexport const ERROR = 'error';\r\nexport const WARN = 'warning';\r\nexport const INFO = 'info';\r\n\r\n/**\r\n * A class used as a popup where we display info / warning and error messages related to user input.\r\n */\r\nexport default class MessageBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"message-box\">\r\n                <div className={' ' + this.props.type}>\r\n                    <div className=\"message-box-title\">\r\n                        {   // Make sure first letter is capitalized\r\n                            this.props.type.charAt(0).toUpperCase() + this.props.type.slice(1)}:\r\n                    </div>\r\n                    <div className=\"message-box-content\">\r\n                        {this.props.message}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","function padNumber(num, width) {\r\n    width = width || 3;\r\n    let n = '' + num;\r\n    return (n.length >= width ? n : new Array(width - n.length + 1).join(' ') + n);\r\n}\r\n\r\nfunction vectorToString(arr, width) {\r\n    let result = '(' + padNumber(arr[0], width);\r\n    for (let i = 1; i < arr.length; i++) {\r\n        result += ',' + padNumber(arr[i], width);\r\n    }\r\n    return result + ')';\r\n}\r\n\r\n/**\r\n * Calculate gcd, u, and v, (from Bezout) using extended Euclidean algorithm.<br/>\r\n * Response will be a string in case of error, or object containing gcd, u, v and calculation steps for exam.\r\n * @param a gcd(a, b)\r\n * @param b gcd(a, b)\r\n * @param aName How to print a variable in calculation steps.\r\n * @param bName How to print b variable in calculation steps.\r\n * @param uName How to print u variable in calculation steps.\r\n * @param vName How to print v variable in calculation steps.\r\n * @returns {string|{value: number, u: number, v: number, calculationSteps: string}}\r\n */\r\nexport const euclideanAlgorithm = (a, b, aName='a', bName='b', uName='u', vName='v') => {\r\n    if (a === 0 || b === 0) {\r\n        return 'You must enter both ' + aName + ' and ' + bName + ' in order to calculate gcd(' + aName + ',' + bName + ')';\r\n    }\r\n\r\n    let aBackup = a;\r\n    let bBackup = b;\r\n\r\n    let isANeg = (a < 0);\r\n    let isBNeg = (b < 0);\r\n    let isSwap = false;\r\n    a = Math.abs(a);\r\n    b = Math.abs(b);\r\n\r\n    if (b > a) {\r\n        isSwap = true;\r\n        let c = a;\r\n        a = b;\r\n        b = c;\r\n    }\r\n\r\n    try {\r\n        let prev = [a, 1, 0];\r\n        let calculationSteps = 'Using extended (vectors) Euclid\\'s algorithm in order to find gcd(' + aName + ',' + bName +\r\n            ') = ' + aName + uName + ' + ' + bName + vName + ' as per Bezout.\\n' + vectorToString(prev);\r\n        let curr = [b, 0, 1];\r\n        let tempCurr = [...curr];\r\n        let remainder = a % b;\r\n        let q = 0;\r\n\r\n        // As long as there is a remainder. (a % b)\r\n        while (remainder !== 0) {\r\n            // Get a/b, floored.\r\n            q = Math.floor(a / b);\r\n            calculationSteps += '\\n' + vectorToString(curr) + '\\t\\t\\u230A' + padNumber(a) + ' / ' + padNumber(b) + '\\u230B = ' + padNumber(q, 2) + ' \\t';\r\n\r\n            // Calculate the next row\r\n            // (a1, a2, a3) - q*(b1, b2, b3) -> (c1, c2, c3)\r\n            for (let i = 0; i < 3; i++) {\r\n                tempCurr[i] = prev[i] - (q * curr[i]);\r\n            }\r\n\r\n            calculationSteps += vectorToString(prev) + ' - ' + padNumber(q, 2) + '*' + vectorToString(curr) + ' = ' + vectorToString(tempCurr);\r\n            a = curr[0]; // Update a, so it will use the current row's value. For next iteration\r\n            b = tempCurr[0]; // Update b, so it will use the next row's value. For next iteration\r\n            prev = curr;\r\n            curr = [...tempCurr]; // Copy\r\n\r\n            // Continue to the next step\r\n            remainder = a % b;\r\n        }\r\n\r\n        // Last step, we will use its values (from curr)\r\n        q = Math.floor(a / b);\r\n        let u = curr[1];\r\n        let v = curr[2];\r\n        if (isSwap) {\r\n            u = v;\r\n            v = curr[1];\r\n        }\r\n\r\n        if (isANeg) {\r\n            u *= (-1);\r\n        }\r\n\r\n        if (isBNeg) {\r\n            v *= (-1);\r\n        }\r\n        calculationSteps += '\\n' + vectorToString(curr) + '\\t\\t\\u230A' + padNumber(a) + ' / ' + padNumber(b) + '\\u230B = ' + padNumber(q, 2) + ' \\t';\r\n        calculationSteps += '\\n\\ngcd(' + aBackup + ', ' + bBackup + ') = ' + curr[0] + ' = ' +\r\n            aBackup + '*' + u + ' + ' + bBackup + '*' + v + '    \\u21D2    ' + uName + ' = ' + u + ',  ' + vName + ' = ' + v;\r\n\r\n        return {\r\n            value: curr[0],\r\n            u: u,\r\n            v: v,\r\n            calculationSteps: calculationSteps\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing Euclid\\'s Algorithm: ' + e;\r\n    }\r\n};","import React from 'react';\r\nimport MessageBox, {\r\n    ERROR\r\n} from '../../utils/message-box';\r\nimport { euclideanAlgorithm } from '../../../model/actions/euclidean-algorithm';\r\nimport './index.css';\r\n\r\n/**\r\n * A class responsible for extended Euclid's algorithm view<br/>\r\n * Uses the logic at euclidean-algorithm.js file\r\n */\r\nexport default class EuclideanAlgorithmForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: '', // a, of gcd(a, b)\r\n            b: '', // b, of gcd(a, b)\r\n            gcd: '', // The gcd value\r\n            u: '', // multiplier of a, according to Bezout\r\n            v: '', // multiplier of b, according to Bezout\r\n            messageType: '', // error\r\n            message: '',\r\n            calculationSteps: ''\r\n        }\r\n\r\n        this.showMessageBox = this.showMessageBox.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets message type and a message to pop it up for the user\r\n     * @param type Message type can be either info, warning, or error\r\n     * @param message The message to display\r\n     */\r\n    showMessageBox(type, message) {\r\n        this.setState({\r\n            messageType: type,\r\n            message: message,\r\n            calculationSteps: 'Error: ' + message\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                messageType: '',\r\n                message: ''\r\n            })\r\n        }, 10000);\r\n    }\r\n\r\n    /**\r\n     * Whenever there is a change in a or b inputs, we keep the values inside state\r\n     * @param event ChangeEvent, to get the target input from\r\n     */\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate gcd(a, b), u and v, when user presses \"Go\" button or Enter inside one of the inputs\r\n     * @param e\r\n     * @returns {Promise<void>}\r\n     */\r\n    handleSubmit = async (e) => {\r\n        let a = Number(this.state.a);\r\n        let b = Number(this.state.b);\r\n\r\n        console.log('Input: a=', a, ', b=', b);\r\n\r\n        let result = euclideanAlgorithm(a, b);\r\n        console.log(result)\r\n\r\n        if (typeof result === 'string' || result instanceof String) {\r\n            this.showMessageBox(ERROR, result);\r\n        } else {\r\n            this.setState({\r\n                u: result.u,\r\n                v: result.v,\r\n                gcd: result.value,\r\n                calculationSteps: result.calculationSteps\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment> {\r\n                <div className=\"euclidean-algorithm-panel\">\r\n                    <div className=\"title\">Extended Euclid's Algorithm: gcd(a, b) = au + bv</div>\r\n                    <div className=\"wrapper\">\r\n                        <label className=\"content\">\r\n                            Enter a and b for calculating gcd(a, b), u, and v in order to have the form gcd(a, b)=au+bv (Bezout)<br/>\r\n                            Note that the algorithm uses absolute, for working with positive numbers, and it makes sure a is the greater one,\r\n                            hence you must see the latest answer and use u,v accordingly. We swap between u and v, and multiply by -1 if\r\n                            it is necessary. Yet you must make sure it was fine.\r\n                        </label>\r\n                        <label>\r\n                            a:\r\n                            <input name=\"a\"\r\n                                   type=\"number\"\r\n                                   value={this.state.a}\r\n                                   onChange={this.handleInputChange}\r\n                                   required\r\n                                   onKeyDown={(e) => {if (e.key === 'Enter') {this.handleSubmit()}}}\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            b:\r\n                            <input name=\"b\"\r\n                                   type=\"number\"\r\n                                   value={this.state.b}\r\n                                   onChange={this.handleInputChange}\r\n                                   required\r\n                                   onKeyDown={(e) => {if (e.key === 'Enter') {this.handleSubmit()}}}\r\n                            />\r\n                        </label>\r\n                        <label className=\"actions\">\r\n                            <div className=\"execute-button\" onClick={this.handleSubmit}>\r\n                                Go\r\n                            </div>\r\n                        </label>\r\n                        <label>Output:</label>\r\n                        <textarea className=\"textarea\" value={this.state.calculationSteps} readOnly />\r\n                        {   // In case there is a message to display, pop it up\r\n                            this.state.message ? <MessageBox type={ this.state.messageType }\r\n                                                             message={this.state.message} /> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","/**\r\n * Calculate gcd using Euclidean algorithm.<br/>\r\n * Response will be a string in case of error, or object containing gcd, iterations count, calculation steps and explanation for exam.\r\n * @param a gcd(a, b)\r\n * @param b gcd(a, b)\r\n * @returns {string|{value: number, actionsCount: number, calculationSteps: string, explanation: string}}\r\n */\r\nexport const gcd = (a, b) => {\r\n    if (a === 0 || b === 0) {\r\n        return 'You must enter both a and b in order to calculate gcd(a,b)';\r\n    }\r\n\r\n    try {\r\n        let actionsCount = 0;\r\n        let calculationSteps = 'gcd(' + a + ', ' + b + ') = ';\r\n        let explanation = '';\r\n\r\n        // If any of the numbers is negative, make sure they are positive without counting it as a step.\r\n        if (a < 0 || b < 0) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            calculationSteps += 'gcd(' + a + ', ' + b + ') = ';\r\n        }\r\n\r\n        // Make sure a is the greater one among a and b, without counting it as a step.\r\n        if (b > a) {\r\n            console.log('Swapping a and b');\r\n            let c = a;\r\n            a = b;\r\n            b = c;\r\n            calculationSteps += 'gcd(' + a + ', ' + b + ') = ';\r\n        }\r\n\r\n        let remainder = 0;\r\n\r\n        do {\r\n            remainder = a % b;\r\n            actionsCount++;\r\n            console.log(a);\r\n            explanation += a + ' = ' + Math.floor(a/b) + '*' + b + ' + ' + remainder + '\\n';\r\n\r\n            a = b;\r\n            b = remainder;\r\n            calculationSteps += 'gcd(' + a + ', ' + b + ') = ';\r\n\r\n            // Continue as long as there is a remainder. (a % b)\r\n        } while (remainder !== 0);\r\n\r\n        calculationSteps += a;\r\n\r\n        return {\r\n            value: a,\r\n            actionsCount: actionsCount,\r\n            calculationSteps: calculationSteps,\r\n            explanation: explanation + '\\nIt took ' + actionsCount + ' iterations to calculate gcd.'\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing gcd(' + a + ', ' + b + ') algorithm: ' + e;\r\n    }\r\n};","/**\r\n * Break a number into its prime factors.<br/>\r\n * The response will be a string in case of error, or object containing two arrays: factors array contains all of the factors,\r\n * e.g. [2, 2, 3, 5]. And the buckets array contains each prime number and its occurrences, as object. e.g. [{prime: 2, count: 2},\r\n * {prime: 3, count: 1}].\r\n * @param n The number to get prime factors for.\r\n * @returns {string|{factors: [{number}], buckets: [{prime: number, count:number}]}}\r\n */\r\nexport const primeFactors = (n) => {\r\n    if (n < 2 && n > -2) {\r\n        return 'No factorial for ' + n;\r\n    }\r\n\r\n    try {\r\n        let result = [];\r\n        n = Math.abs(n);\r\n\r\n        // Collect all 2's\r\n        while (n%2 === 0) {\r\n            result.push(2);\r\n            n /= 2;\r\n        }\r\n\r\n        // From now on, n is odd, hence jump by 2. Note that there is no need to continue after sqrt(n)\r\n        for (let i = 3; i <= Math.sqrt(n); i+= 2) {\r\n            // While i divides n, collect it\r\n            while (n%i === 0) {\r\n                result.push(i);\r\n                n /= i;\r\n            }\r\n        }\r\n\r\n        // In case n is a prime number bigger than one, it is the only factor.\r\n        if (n > 2) {\r\n            result.push(n);\r\n        }\r\n\r\n        // So we can use it as p1^a1, p2^a2, ...\r\n        let buckets = [];\r\n        let prevPrimeFactor = result[0];\r\n        let count = 1;\r\n        for (let i = 1; i < result.length; i++) {\r\n            if (result[i] !== prevPrimeFactor) {\r\n                buckets.push({prime: prevPrimeFactor, count: count});\r\n                prevPrimeFactor = result[i];\r\n                count = 0;\r\n            }\r\n\r\n            count++;\r\n        }\r\n\r\n        // Push the last item\r\n        buckets.push({prime: prevPrimeFactor, count: count});\r\n\r\n        return {\r\n            factors: result,\r\n            buckets: buckets // So we can use it as p1^a1, p2^a2, ...\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing primeFactors(' + n + ') algorithm: ' + e;\r\n    }\r\n};","import {gcd} from './gcd'\r\nimport {primeFactors} from './prime-factors'\r\n\r\nexport const GCD_ALG_TYPE = 'gcd';\r\nexport const PRIME_FACTORS_ALG_TYPE = 'primeFactor';\r\n\r\n/**\r\n * Calculate lcm using gcd (Euclidean algorithm) or prime factors, depends on algType parameter.<br/>\r\n * Response will be a string in case of error, or object containing lcm, calculation steps and explanation for exam.\r\n * @param a lcm(a, b)\r\n * @param b lcm(a, b)\r\n * @param algType whether we want the gcd (GCD_ALG_TYPE) technique, or prime factors (PRIME_FACTORS_ALG_TYPE) technique.\r\n * @returns {string|{value: number, calculationSteps: string, explanation: string}}\r\n */\r\nexport const lcm = (a, b, algType=GCD_ALG_TYPE) => {\r\n    if (a === 0 || b === 0) {\r\n        return 'You must enter both a and b in order to calculate lcm(a,b)';\r\n    }\r\n\r\n    try {\r\n        algType = algType || GCD_ALG_TYPE;\r\n        if (algType === GCD_ALG_TYPE) {\r\n            let gcdResult = gcd(a, b);\r\n            let lcmValue = Math.abs(a * b) / gcdResult.value;\r\n\r\n            return {\r\n                value: lcmValue,\r\n                calculationSteps: '|' + a + '*' + b + '| / ' + gcdResult.value + ' = |' + (a * b) + '| / ' + gcdResult.value + ' = ' + lcmValue,\r\n                explanation: gcdResult.calculationSteps + '\\n' + gcdResult.explanation\r\n            };\r\n        } else {\r\n            let aPrimeFactors = primeFactors(a);\r\n            let bPrimeFactors = primeFactors(b);\r\n            console.log(aPrimeFactors)\r\n            console.log(bPrimeFactors)\r\n            let arr = new Array(Math.max(aPrimeFactors.buckets[aPrimeFactors.buckets.length - 1].prime,\r\n                                         bPrimeFactors.buckets[bPrimeFactors.buckets.length - 1].prime) + 1);\r\n            let explanation = a + ' = ' + (a < 0 ? '-1 * ' : '');\r\n            let innerExplanation = '';\r\n            for (let i = 0; i < arr.length; i++) {\r\n                arr[i] = 0;\r\n            }\r\n            for (let i = 0; i < aPrimeFactors.buckets.length; i++) {\r\n                arr[aPrimeFactors.buckets[i].prime] = aPrimeFactors.buckets[i].count;\r\n\r\n                if (innerExplanation.length !== 0) {\r\n                    innerExplanation += ' * ';\r\n                }\r\n                innerExplanation += aPrimeFactors.buckets[i].prime + '^' + aPrimeFactors.buckets[i].count;\r\n            }\r\n\r\n            explanation += innerExplanation + '\\n' + b + ' = ' + (b < 0 ? '-1 * ' : '');\r\n            innerExplanation = '';\r\n            for (let i = 0; i < bPrimeFactors.buckets.length; i++) {\r\n                arr[bPrimeFactors.buckets[i].prime] = Math.max(arr[bPrimeFactors.buckets[i].prime], bPrimeFactors.buckets[i].count);\r\n\r\n                if (innerExplanation.length !== 0) {\r\n                    innerExplanation += ' * ';\r\n                }\r\n                innerExplanation += bPrimeFactors.buckets[i].prime + '^' + bPrimeFactors.buckets[i].count;\r\n            }\r\n\r\n            explanation += innerExplanation;\r\n            innerExplanation = '';\r\n            let lcmValue = 1;\r\n            for (let i = 2; i < arr.length; i++) {\r\n                if (arr[i] !== 0) {\r\n                    lcmValue *= Math.pow(i, arr[i]);\r\n\r\n                    if (innerExplanation.length !== 0) {\r\n                        innerExplanation += ' * ';\r\n                    }\r\n                    innerExplanation += i + '^' + arr[i];\r\n                }\r\n            }\r\n\r\n            return {\r\n                value: lcmValue,\r\n                calculationSteps: 'lcm(' + a + ', ' + b + ') = ' + innerExplanation + ' = ' + lcmValue,\r\n                explanation: explanation\r\n            };\r\n        }\r\n    } catch (e) {\r\n        return 'Error has occurred while executing lcm(' + a + ', ' + b + ') algorithm: ' + e;\r\n    }\r\n};","import React from 'react';\r\nimport MessageBox, {\r\n    ERROR\r\n} from '../../utils/message-box';\r\nimport { gcd } from '../../../model/actions/gcd';\r\nimport { lcm, GCD_ALG_TYPE, PRIME_FACTORS_ALG_TYPE } from '../../../model/actions/lcm';\r\nimport { primeFactors } from '../../../model/actions/prime-factors';\r\nimport './index.css';\r\n\r\n/**\r\n * A class responsible for gcd (Euclid's algorithm), lcm and prime factors algorithms<br/>\r\n * Uses the logic at gcd-lcm-prime-factors.js file\r\n */\r\nexport default class GcdLcmForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: '', // a, of gcd(a, b)\r\n            b: '', // b, of gcd(a, b)\r\n            algType: GCD_ALG_TYPE, // When user wants to run lcm, he can select whether to use gcd or prime-factors\r\n            value: '', // The gcd/lcm value\r\n            messageType: '', // error\r\n            message: '',\r\n            calculationSteps: '', // Steps for exam\r\n            explanation: '' // Additional explanation, explaining the steps\r\n        }\r\n\r\n        this.showMessageBox = this.showMessageBox.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets message type and a message to pop it up for the user\r\n     * @param type Message type can be either info, warning, or error\r\n     * @param message The message to display\r\n     */\r\n    showMessageBox(type, message) {\r\n        this.setState({\r\n            messageType: type,\r\n            message: message,\r\n            calculationSteps: 'Error: ' + message\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                messageType: '',\r\n                message: ''\r\n            })\r\n        }, 10000);\r\n    }\r\n\r\n    /**\r\n     * Whenever there is a change in a or b inputs, we keep the values inside state\r\n     * @param event ChangeEvent, to get the target input from\r\n     */\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate gcd(a, b), u and v, when user presses \"Go\" button or Enter inside one of the inputs\r\n     * @param event\r\n     * @returns {Promise<void>}\r\n     */\r\n    handleSubmit = async (event) => {\r\n        const target = event.target;\r\n        let a = Number(this.state.a);\r\n        let b = Number(this.state.b);\r\n        console.log('Input: a=', a, ', b=', b, ', algType=', this.state.algType, ', action=', target.id);\r\n\r\n        if (target.id === 'gcd' || target.id === 'lcm') {\r\n            let result;\r\n            if (target.id === 'gcd') {\r\n                result = gcd(a, b);\r\n            } else {\r\n                result = lcm(a, b, this.state.algType);\r\n            }\r\n            console.log(result)\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                this.setState({\r\n                    value: result.value,\r\n                    calculationSteps: result.calculationSteps,\r\n                    explanation: result.explanation + '\\n'\r\n                });\r\n            }\r\n        } else {\r\n            let result = primeFactors(a);\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                this.setState({\r\n                    calculationSteps: a + ' = ' + (a < 0 ? '-1 * ' : '') + result.factors.join(' * '),\r\n                    explanation: ''\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment> {\r\n                <div className=\"gcdlcm-algorithm-panel\">\r\n                    <div className=\"title\">gcd(a, b), lcm(a, b), and prime-factors</div>\r\n                    <div className=\"wrapper\">\r\n                        <label className=\"content\">\r\n                            Enter a and b for calculating gcd(a, b), or lcm(a, b), or primeFactors(a)<br/>\r\n                            gcd uses Euclid's algorithm, where we show the steps, explanation and iterations count.<br/>\r\n                            lcm can use gcd or prime-factors techniques, depends on your selection for algorithm type.<br/>\r\n                            primeFactors will let you see the factorization of a number using its prime factors.\r\n                        </label>\r\n                        <label>\r\n                            a:\r\n                            <input name=\"a\"\r\n                                   type=\"number\"\r\n                                   value={this.state.a}\r\n                                   onChange={this.handleInputChange}\r\n                                   required\r\n                                   onKeyDown={(e) => {if (e.key === 'Enter') {this.handleSubmit(e)}}}\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            b:\r\n                            <input name=\"b\"\r\n                                   type=\"number\"\r\n                                   value={this.state.b}\r\n                                   onChange={this.handleInputChange}\r\n                                   required\r\n                                   onKeyDown={(e) => {if (e.key === 'Enter') {this.handleSubmit(e)}}}\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            Algorithm to use for lcm(a, b) calculation:\r\n                            <select name=\"algType\"\r\n                                    value={this.state.algType}\r\n                                    onChange={this.handleInputChange}>\r\n                                {[GCD_ALG_TYPE, PRIME_FACTORS_ALG_TYPE].map((option) => (\r\n                                    <option key={option} value={option}>{option}</option>\r\n                                ))}\r\n                            </select>\r\n                        </label>\r\n                        <label className=\"actions\">\r\n                            <div className=\"execute-button\" id=\"gcd\" onClick={this.handleSubmit}>\r\n                                gcd(a, b)\r\n                            </div>\r\n                            <div className=\"execute-button\" id=\"lcm\" onClick={this.handleSubmit}>\r\n                                lcm(a, b)\r\n                            </div>\r\n                            <div className=\"execute-button\" id=\"prime\" onClick={this.handleSubmit}>\r\n                                primeFactors(a)\r\n                            </div>\r\n                        </label>\r\n                        <label>Output:</label>\r\n                        <textarea className=\"textarea\" value={this.state.calculationSteps + '\\n\\n' + this.state.explanation} readOnly />\r\n                        {   // In case there is a message to display, pop it up\r\n                            this.state.message ? <MessageBox type={ this.state.messageType }\r\n                                                             message={this.state.message} /> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import {gcd} from './gcd'\r\nimport {primeFactors} from './prime-factors'\r\n\r\n/**\r\n * Get all numbers between 1 and n where gcd(n, i) = 1.<br/>\r\n * The response will be a string in case of error, or object containing array with the numbers.\r\n * e.g. for n=3 the result will be {nums: [1, 2]}.\r\n * @param n The number to calculate Euler function for.\r\n * @returns {string|{nums: [], calculationSteps: string}}\r\n */\r\nexport const eulerFunc = (n) => {\r\n    if (n < 1) {\r\n        return 'n must be greater or equal to 1.'\r\n    }\r\n\r\n    if (n === 1) {\r\n        return {\r\n            nums: [1],\r\n            calculationSteps: 'gcd(1, 1) = 1'\r\n        }\r\n    }\r\n\r\n    try {\r\n        let nums = [];\r\n        let calculationSteps = '';\r\n\r\n        for (let i = 1; i < n; i++) {\r\n            let gcdRes = gcd(n, i);\r\n            if (gcdRes.value === 1) {\r\n                calculationSteps += gcdRes.calculationSteps + '\\n';\r\n                nums.push(i);\r\n            }\r\n        }\r\n\r\n        return {\r\n            nums: nums,\r\n            calculationSteps: calculationSteps\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing eulerFunc(' + n + ') algorithm: ' + e;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Get the amount of numbers between 1 and n where gcd(n, i) = 1, using Euler's formula<br/>\r\n * The response will be a string in case of error, or object containing the value and calculation steps for exam.\r\n * @param n The number to calculate Euler function for.\r\n * @returns {string|{value: number, calculationSteps: string}}\r\n */\r\nexport const eulerFormula = (n) => {\r\n    if (n < 1) {\r\n        return 'n must be greater or equal to 1.'\r\n    }\r\n\r\n    if (n === 1) {\r\n        return {\r\n            value: 1,\r\n            calculationSteps: ''\r\n        }\r\n    }\r\n\r\n    try {\r\n        let primeFactorRes = primeFactors(n);\r\n        let calculationSteps = '\\u03C6(' + n + ') = ' + n;\r\n        let calculationHelper = '';\r\n        let value = n;\r\n\r\n        for (let i = 0; i < primeFactorRes.buckets.length; i++) {\r\n            let currPrime = primeFactorRes.buckets[i].prime;\r\n            calculationSteps += ' * (1 - 1/' + currPrime + ')'\r\n            value *= (1 - (1/currPrime));\r\n\r\n            if (calculationHelper.length !== 0) {\r\n                calculationHelper += ' * '\r\n            }\r\n            calculationHelper += currPrime + '^' + primeFactorRes.buckets[i].count;\r\n        }\r\n\r\n        return {\r\n            value: Math.floor(value),\r\n            calculationSteps: calculationSteps + '\\n' + n + ' = ' + calculationHelper\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing eulerFormula(' + n + ') algorithm: ' + e;\r\n    }\r\n};","import {eulerFormula} from './euler'\r\n\r\n/**\r\n * Use Euler's formula to compare Gauss Sum to n.\r\n * @param n The number to execute Gauss sum on.\r\n * @returns {string|{calculationSteps: string}}\r\n */\r\nexport const gaussSum = (n) => {\r\n    if (n < 1) {\r\n        return 'n must be greater or equal to 1.'\r\n    }\r\n\r\n    if (n === 1) {\r\n        return {\r\n            calculationSteps: '1 = \\u03C6(1)'\r\n        }\r\n    }\r\n\r\n    try {\r\n        let sqrtN = Math.floor(Math.sqrt(n));\r\n        let calculationSteps = '\\u03C6(1)';\r\n        let calculationHelper = '1';\r\n        let numsStack = [n];\r\n        let explanation = '\\u03C6(1) = 1';\r\n\r\n        for (let i = 2; i <= sqrtN; i++) {\r\n            if ((n % i) === 0) {\r\n                numsStack.push(Math.floor(n/i));\r\n                let eulerRes = eulerFormula(i);\r\n                calculationSteps += ' + \\u03C6(' + i + ')';\r\n                calculationHelper += ' + ' + eulerRes.value;\r\n                explanation += '\\n' + eulerRes.calculationSteps.replace('\\n', ' = ' + eulerRes.value + ',    ');\r\n            }\r\n        }\r\n\r\n        while (numsStack.length > 0) {\r\n            let currNum = numsStack.pop();\r\n            let eulerRes = eulerFormula(currNum);\r\n            calculationSteps += ' + \\u03C6(' + currNum + ')';\r\n            calculationHelper += ' + ' + eulerRes.value;\r\n            explanation += '\\n' + eulerRes.calculationSteps.replace('\\n', ' = ' + eulerRes.value + ',    ');\r\n        }\r\n\r\n        return {\r\n            calculationSteps: n + ' = ' + calculationSteps + ' = ' + calculationHelper + '\\n\\n' + explanation\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing gaussSum(' + n + ') algorithm: ' + e;\r\n    }\r\n};","import React from 'react';\r\nimport MessageBox, {\r\n    ERROR\r\n} from '../../utils/message-box';\r\nimport { eulerFunc, eulerFormula } from '../../../model/actions/euler';\r\nimport { gaussSum } from '../../../model/actions/gauss';\r\nimport './index.css';\r\n\r\n/**\r\n * A class responsible for Euler function and formula<br/>\r\n * Uses the logic at euler.js file\r\n */\r\nexport default class EulerForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            n: '', // n, of Phi(n)\r\n            value: '', // The result value\r\n            messageType: '', // error\r\n            message: '',\r\n            calculationSteps: '' // Steps for exam\r\n        }\r\n\r\n        this.showMessageBox = this.showMessageBox.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets message type and a message to pop it up for the user\r\n     * @param type Message type can be either info, warning, or error\r\n     * @param message The message to display\r\n     */\r\n    showMessageBox(type, message) {\r\n        this.setState({\r\n            messageType: type,\r\n            message: message,\r\n            calculationSteps: 'Error: ' + message\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                messageType: '',\r\n                message: ''\r\n            })\r\n        }, 10000);\r\n    }\r\n\r\n    /**\r\n     * Whenever there is a change in n inputs, we keep the values inside state\r\n     * @param event ChangeEvent, to get the target input from\r\n     */\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate Phi(n)\r\n     * @param event\r\n     * @returns {Promise<void>}\r\n     */\r\n    handleSubmit = async (event) => {\r\n        const target = event.target;\r\n        let n = Number(this.state.n);\r\n        console.log('Input: n=', n, ', action=', target.id);\r\n\r\n        if (target.id === 'eulerFunc') {\r\n            let result = eulerFunc(n);\r\n            console.log(result)\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                this.setState({\r\n                    value: result.nums.length,\r\n                    calculationSteps: 'Numbers: ' + result.nums + '\\n(count=' + result.nums.length + ')\\n\\n' + result.calculationSteps\r\n                });\r\n            }\r\n        } else if (target.id === 'eulerFormula') {\r\n            let result = eulerFormula(n);\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                this.setState({\r\n                    value: result.value,\r\n                    calculationSteps: '\\u03C6(' + n + ') = ' + result.value + '\\n\\n' + result.calculationSteps\r\n                });\r\n            }\r\n        } else {\r\n            let result = gaussSum(n);\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                this.setState({\r\n                    calculationSteps: result.calculationSteps\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment> {\r\n                <div className=\"euler-algorithm-panel\">\r\n                    <div className=\"title\">Euler Function and Formula</div>\r\n                    <div className=\"wrapper\">\r\n                        <label className=\"content\">\r\n                            Enter n for calculating φ(n)<br/>\r\n                            Press EulerFunc for getting the numbers below n where gcd(n, i) = 1.<br/>\r\n                            Press EulerFormula for getting the amount of numbers in EulerFunc, with calculation steps according to Euler formula.\r\n                        </label>\r\n                        <label>\r\n                            n:\r\n                            <input name=\"n\"\r\n                                   type=\"number\"\r\n                                   value={this.state.n}\r\n                                   onChange={this.handleInputChange}\r\n                                   required\r\n                                   onKeyDown={(e) => {if (e.key === 'Enter') {this.handleSubmit(e)}}}\r\n                            />\r\n                        </label>\r\n                        <label className=\"actions\">\r\n                            <div className=\"execute-button\" id=\"eulerFunc\" onClick={this.handleSubmit}>\r\n                                Euler Func\r\n                            </div>\r\n                            <div className=\"execute-button\" id=\"eulerFormula\" onClick={this.handleSubmit}>\r\n                                Euler Formula\r\n                            </div>\r\n                            <div className=\"execute-button\" id=\"gaussSum\" onClick={this.handleSubmit}>\r\n                                Gauss Sum\r\n                            </div>\r\n                        </label>\r\n                        <label>Output:</label>\r\n                        <textarea className=\"textarea\" value={this.state.calculationSteps} readOnly />\r\n                        {   // In case there is a message to display, pop it up\r\n                            this.state.message ? <MessageBox type={ this.state.messageType }\r\n                                                             message={this.state.message} /> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import {euclideanAlgorithm} from './euclidean-algorithm'\r\n\r\n/**\r\n * Parse an equation string an extract a, b and n out of it.\r\n * @param equation The equation to parse\r\n * @returns {string|{a: number, b: number, n: number}}\r\n */\r\nfunction parseEquation(equation) {\r\n    // Look at it as a lower case string, with no spaces, to be able to skip const parts with no exceptions.\r\n    let srcEquation = equation;\r\n    equation = equation.toLowerCase().replaceAll(' ', '');\r\n    if (equation.length === 0) {\r\n        return 'Nothing to solve. Equation was empty.'\r\n    }\r\n\r\n    let indexOfX = equation.indexOf('x');\r\n    if (indexOfX < 0) {\r\n        return 'Illegal equation. X could not be detected. Was: ' + srcEquation;\r\n    }\r\n\r\n    let a = indexOfX === 0 ? 1 : Number(equation.substr(0, indexOfX));\r\n    let indexOfEqual = equation.indexOf('\\u2261');\r\n    if (indexOfEqual < 0) {\r\n        indexOfEqual = equation.indexOf('=');\r\n        if (indexOfEqual < 0) {\r\n            return 'Illegal equation. Equals symbol could not be detected. Was: ' + srcEquation;\r\n        }\r\n    }\r\n\r\n    let indexOfBeginParentheses = equation.indexOf('(');\r\n    if (indexOfBeginParentheses < 0) {\r\n        return 'Illegal equation. ( could not be detected. Was: ' + srcEquation;\r\n    }\r\n\r\n    let length = indexOfBeginParentheses - indexOfEqual - 1;\r\n    if (length < 1) {\r\n        return 'Illegal equation. b (remainder) was empty. Was: ' + srcEquation;\r\n    }\r\n\r\n    let b = Number(equation.substr(indexOfEqual + 1, length));\r\n    let indexOfMod = equation.indexOf('d');\r\n    if (indexOfMod < 0) {\r\n        indexOfMod = equation.indexOf('(');\r\n    }\r\n\r\n    let c = equation.charAt(indexOfMod + 1);\r\n    if (c < '0' || c > '9') {\r\n        return 'Illegal equation. mod (divisor) was empty. Was: ' + srcEquation;\r\n    }\r\n\r\n    let indexOfEndParentheses = equation.indexOf(')');\r\n    if (indexOfEndParentheses < 0) {\r\n        return 'Illegal equation. ) could not be detected. Was: ' + srcEquation;\r\n    }\r\n\r\n    let n = Number(equation.substr(indexOfMod + 1, indexOfEndParentheses - indexOfMod - 1));\r\n\r\n    return {\r\n        a: a,\r\n        b: b,\r\n        n: n\r\n    }\r\n}\r\n\r\n/**\r\n * Solves a single equation. Response will be a string in case of error, or an object containing the calculation steps,\r\n * with the value (x=value) that we have found. In case the equation does not have answer (gcd(a,n) does not divide b), the\r\n * value will be a negative number.<br/>\r\n * Note that there are d=gcd(a,n) values in the response, according to the formula.<br/>\r\n * In addition, in case of successful response, the result will contain all of the modular equation parameters: a, b, n, d, q,\r\n * from ax=b(mod n), where d=gcd(a, n)=aq+nt\r\n * @param equation The equation (string) to solve.\r\n * @returns {string|{calculationSteps: string, values: [{number}], a: number, b: number, n: number, d: number, q: number}}\r\n */\r\nexport const solveEquation = (equation) => {\r\n    let equationItems = parseEquation(equation);\r\n\r\n    // In case of error message, return it.\r\n    if (typeof equationItems === 'string' || equationItems instanceof String) {\r\n        return equationItems;\r\n    }\r\n\r\n    try {\r\n        let a = equationItems.a;\r\n        let b = equationItems.b;\r\n        let n = equationItems.n;\r\n\r\n        let calculationSteps = (a === 1 ? '' : a) + 'x\\u2261' + b + '(mod ' + n + ')';\r\n        calculationSteps += ',\\t\\tax\\u2261b(mod n):  a=' + a + ',  b=' + b + ',  n=' + n + '\\n';\r\n        let gcdRes = euclideanAlgorithm(a, n, 'a', 'n', 'q', 't');\r\n        let d = gcdRes.value;\r\n        let q = gcdRes.u;\r\n        calculationSteps += gcdRes.calculationSteps + '\\n';\r\n\r\n        if (b % d !== 0) {\r\n            // GCD does not divide b. \\u16C5 = NOT DIVIDES, \\u21D2 = HENCE\r\n            calculationSteps += '\\ngcd(a,n)\\u16C5b \\u21D2 ' + d + '\\u16C5' + b + ' \\u21D2 No answer.';\r\n            return {\r\n                values: [-1],\r\n                a: a,\r\n                b: b,\r\n                n: n,\r\n                d: d,\r\n                q: q,\r\n                calculationSteps: calculationSteps\r\n            }\r\n        }\r\n\r\n        calculationSteps += '\\ngcd(a,n)|b \\u21D2 ' + d + '|' + b + ' \\u21D2 q=' + q;\r\n        let x0 = (q * b / d) % n;\r\n        calculationSteps += '\\nx0 \\u2261 qb/d(mod n) \\u2261 ' + q + '*' + b + '/' + d + '(mod ' + n + ') \\u2261 ' +\r\n            (q * b / d) + '(mod ' + n + ')';\r\n        if ((q * b / d) !== x0) {\r\n            calculationSteps += ' \\u2261 ' + x0 + '(mod ' + n + ')';\r\n        }\r\n        if (x0 < 0) {\r\n            while (x0 < 0) x0 += n;\r\n            calculationSteps += ' \\u2261 ' + x0 + '(mod ' + n + ')';\r\n        }\r\n        calculationSteps += '\\n';\r\n\r\n        let values;\r\n\r\n        if (d === 1) {\r\n            values = [x0];\r\n        } else {\r\n            values = [];\r\n\r\n            // Now add the values\r\n            for (let k = 0; k < d; k++) {\r\n                let xkBeforeMod = x0 + (k * n / d);\r\n                let xk = xkBeforeMod % n;\r\n                calculationSteps += '\\nx' + k + ' \\u2261 (x0 + kn/d)(mod n) \\u2261 (' + x0 + '+(' + k + '*' + n + '/' + d + '))(mod ' + n + ') \\u2261 ' +\r\n                    xkBeforeMod + '(mod ' + n + ')';\r\n\r\n                // Now append xk after the mod, only in case it differs from what we have already appended.\r\n                if (xkBeforeMod !== xk) {\r\n                    calculationSteps += ' \\u2261 ' + xk + '(mod ' + n + ')';\r\n                }\r\n                if (xk < 0) {\r\n                    while (xk < 0) xk += n;\r\n                    calculationSteps += ' \\u2261 ' + x0 + '(mod ' + n + ')';\r\n                }\r\n\r\n                values.push(xk);\r\n            }\r\n        }\r\n\r\n        return {\r\n            values: values,\r\n            a: a,\r\n            b: b,\r\n            n: n,\r\n            d: d,\r\n            q: q,\r\n            calculationSteps: calculationSteps\r\n        };\r\n    } catch (e) {\r\n        return 'Error has occurred while executing solveEquation(' + equation + ') algorithm: ' + e;\r\n    }\r\n};\r\n\r\nexport const solveEquations = (equations) => {\r\n    let calculationSteps = '';\r\n    let equationItems = [];\r\n\r\n    // Parse and validate equations. Fix equations if necessary (when a != 1)\r\n    for (let i = 0; i < equations.length; i++) {\r\n        let currEquation = equations[i];\r\n        let currEquationItems = parseEquation(currEquation);\r\n\r\n        // In case of error message, return it.\r\n        if (typeof currEquationItems === 'string' || currEquationItems instanceof String) {\r\n            return currEquationItems;\r\n        }\r\n\r\n        // We must make sure a=1. If not, solve the equation to adjust it to a=1.\r\n        if (currEquationItems.a !== 1) {\r\n            calculationSteps += 'Equation number ' + (i+1) + ' got a\\u22601. Adjusting it such that a=1. (' + currEquation + ')\\n';\r\n            let fixedEquation = solveEquation(currEquation);\r\n            currEquationItems = {\r\n                a: 1,\r\n                b: fixedEquation.values[0],\r\n                n: fixedEquation.n\r\n            };\r\n            calculationSteps += currEquation + '  has been solved. Fixed equation is: x\\u2261' + currEquationItems.b + '(mod ' + currEquationItems.n + ')\\n';\r\n            calculationSteps += 'Explanation:\\n\\t' + fixedEquation.calculationSteps.replaceAll('\\n', '\\n\\t').replaceAll('\\n\\t\\n\\t', '\\n\\n\\t') + '\\n';\r\n        }\r\n\r\n        equationItems.push(currEquationItems);\r\n    }\r\n\r\n    // Calculate little m.\r\n    let m = 1;\r\n    let littleAExplanation = ''; // a1, a2, a3\r\n    let littleMExplanation = ''; // m1, m2, m3\r\n    let calculationStepsHelper = '';\r\n    calculationSteps += 'Solving:';\r\n    for (let i = 0; i < equationItems.length; i++) {\r\n        let currEquationItems = equationItems[i];\r\n        calculationSteps += '\\nx \\u2261 ' + currEquationItems.b + ' (mod ' + currEquationItems.n + ')';\r\n\r\n        m *= currEquationItems.n;\r\n        if (littleMExplanation.length !== 0) {\r\n            littleMExplanation += ' * ';\r\n            calculationStepsHelper += ' * ';\r\n            littleAExplanation += ' ,    ';\r\n        }\r\n        littleMExplanation += currEquationItems.n;\r\n        calculationStepsHelper += 'm' + (i+1);\r\n        littleAExplanation += 'a' + (i+1) + '=' + currEquationItems.b;\r\n    }\r\n\r\n    littleMExplanation = 'm = ' + calculationStepsHelper + ' = ' + littleMExplanation + ' = ' + m + '\\n';\r\n\r\n    // Calculate the big Mi values\r\n    let bigMExplanation = '';\r\n    let bigMs = [];\r\n    for (let i = 0; i < equationItems.length; i++) {\r\n        let currEquationItems = equationItems[i];\r\n        bigMs.push(m/currEquationItems.n);\r\n\r\n        if (bigMExplanation.length !== 0) {\r\n            bigMExplanation += ' ,    ';\r\n        }\r\n        bigMExplanation += 'M' + (i+1) + '=' + m + '/' + currEquationItems.n + '=' + bigMs[bigMs.length - 1];\r\n    }\r\n\r\n    // Create new equations, based on MiXi = 1(mod mi)\r\n    calculationSteps += '\\n\\n' + littleAExplanation + '\\n' + littleMExplanation + bigMExplanation + '\\n\\nSolving Xi now. (Mixi \\u2261 1 (mod mi))\\n';\r\n    let xIsEquations = [];\r\n    for (let i = 0; i < equationItems.length; i++) {\r\n        let currEquationItems = equationItems[i];\r\n        let newEquation = bigMs[i] + 'x \\u2261 1 (mod ' + currEquationItems.n + ')';\r\n        xIsEquations.push(newEquation);\r\n        calculationSteps += newEquation + '\\n';\r\n    }\r\n\r\n    // Now calculate each Xi value and keep in an array.\r\n    calculationSteps += '\\n';\r\n    let xIsValues = [];\r\n    for (let i = 0; i < xIsEquations.length; i++) {\r\n        let currEquation = xIsEquations[i];\r\n        let currEquationItems = solveEquation(currEquation);\r\n        xIsValues.push(currEquationItems.values[0]);\r\n        calculationSteps += currEquation + ' \\u21D2 x' + (i+1) + '=' + currEquationItems.values[0] +\r\n            '\\nExplanation:\\n\\t' + currEquationItems.calculationSteps.replaceAll('\\n', '\\n\\t').replaceAll('\\n\\t\\n\\t', '\\n\\n\\t') + '\\n';\r\n    }\r\n\r\n    // Now calculate x.\r\n    calculationSteps += '\\nx \\u2261 ('\r\n    calculationStepsHelper = '';\r\n    let calculationStepsHelper2 = '';\r\n    let x = 0;\r\n    for (let i = 0; i < xIsValues.length; i++) {\r\n        let num = '' + (i+1);\r\n        let currAi = equationItems[i].b;\r\n        let currMi = bigMs[i];\r\n        let currXi = xIsValues[i];\r\n\r\n        if (calculationStepsHelper.length !== 0) {\r\n            calculationStepsHelper += ' + ';\r\n            calculationStepsHelper2 += ' + ';\r\n        }\r\n        calculationStepsHelper += 'a' + num + '*M' + num + '*x' + num;\r\n        calculationStepsHelper2 += currAi + '*' + currMi + '*' + currXi;\r\n\r\n        x += (currAi * currMi * currXi);\r\n    }\r\n\r\n    calculationSteps += calculationStepsHelper + ')(mod m)\\nx \\u2261 (' + calculationStepsHelper2 + ')(mod ' + m + ') \\u2261 ' +\r\n        x + '(mod ' + m + ') \\u2261 ';\r\n    x = (x % m);\r\n    calculationSteps += x + '(mod ' + m + ')';\r\n\r\n    return {\r\n        value: x,\r\n        m: m,\r\n        calculationSteps: calculationSteps\r\n    }\r\n};","import React from 'react';\r\nimport MessageBox, {\r\n    ERROR\r\n} from '../../utils/message-box';\r\nimport { solveEquation, solveEquations } from '../../../model/actions/modular-equations';\r\nimport './index.css';\r\n\r\nconst DEFAULT_EQUATION = 'x \\u2261 b (mod n)';\r\n/**\r\n * A class responsible for Modular Equations solving\r\n */\r\nexport default class ModularEquationsForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            equations: ['ax \\u2261 b (mod n)', DEFAULT_EQUATION, DEFAULT_EQUATION], // Array of strings, containing equations\r\n            value: '', // The result value. (x)\r\n            messageType: '', // error\r\n            message: '',\r\n            calculationSteps: '' // Steps for exam\r\n        }\r\n\r\n        this.showMessageBox = this.showMessageBox.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets message type and a message to pop it up for the user\r\n     * @param type Message type can be either info, warning, or error\r\n     * @param message The message to display\r\n     */\r\n    showMessageBox(type, message) {\r\n        this.setState({\r\n            messageType: type,\r\n            message: message,\r\n            calculationSteps: 'Error: ' + message\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                messageType: '',\r\n                message: ''\r\n            })\r\n        }, 10000);\r\n    }\r\n\r\n    /**\r\n     * Whenever there is a change in any equation row input, we keep the values inside state\r\n     * @param index Row index, to know which value to update\r\n     * @param event ChangeEvent, to get the target input from\r\n     */\r\n    handleInputChange(index, event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n\r\n        let equations = [...this.state.equations];\r\n        equations[index] = value;\r\n        this.setState({ equations: equations });\r\n    }\r\n\r\n    /**\r\n     * Calculate Phi(n)\r\n     * @param event\r\n     * @returns {Promise<void>}\r\n     */\r\n    handleSubmit = async (event) => {\r\n        const target = event.target;\r\n        let equations = this.state.equations;\r\n        console.log('Input: equations=', equations, ', action=', target.id);\r\n\r\n        if ((equations.length === 1) || (equations[1].length === 0) || (equations[1] === DEFAULT_EQUATION)) {\r\n            let result = solveEquation(equations[0]);\r\n            console.log(result)\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                let answer;\r\n                if (result.values[0] === -1) {\r\n                    answer = 'No answer.';\r\n                } else {\r\n                    answer = 'Answer:\\n';\r\n                    for (let i = 0; i < result.values.length; i++) {\r\n                        answer += 'x' + i + ' \\u2261 ' + result.values[i] + ' (mod ' + result.n + ')\\n';\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    value: result.values.toString(),\r\n                    calculationSteps: answer + 'Check steps below:\\n\\n' + result.calculationSteps\r\n                });\r\n            }\r\n        } else {\r\n            let result = solveEquations(equations);\r\n            console.log(result)\r\n\r\n            if (typeof result === 'string' || result instanceof String) {\r\n                this.showMessageBox(ERROR, result);\r\n            } else {\r\n                let answer = 'Answer: x \\u2261 ' + result.value + ' (mod ' + result.m + '). ';\r\n\r\n                this.setState({\r\n                    value: result.value,\r\n                    calculationSteps: answer + 'Check steps below:\\n\\n' + result.calculationSteps\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an equation to the form.\r\n     */\r\n    addEquation() {\r\n        this.setState(prevState => ({ equations: [...prevState.equations, DEFAULT_EQUATION]}))\r\n    }\r\n\r\n    /**\r\n     * Removes the equation at the specified row index\r\n     * @param index The row index of equation user selected to remove\r\n     */\r\n    removeEquation(index) {\r\n        if (this.state.equations.length > 1) {\r\n            let equations = [...this.state.equations];\r\n            equations.splice(index, 1);\r\n            this.setState({equations: equations});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment> {\r\n                <div className=\"modular-equations-algorithm-panel\">\r\n                    <div className=\"title\">Modular Equations</div>\r\n                    <div className=\"wrapper\">\r\n                        <label className=\"content\">\r\n                            Enter an equation for calculating x. You can add as many equations as you need by using the + button<br/>\r\n                            For example, enter 3x=1(mod6), or 3x≡3(mod6).\r\n                        </label>\r\n                        {\r\n                            // Dynamic rows, to let user add or remove equations\r\n                            this.state.equations.map((equation, i) =>\r\n                                <label key={'label' + i} className=\"actions\">\r\n                                    <div key={i}>\r\n                                        <input type=\"text\" value={equation||DEFAULT_EQUATION} onChange={this.handleInputChange.bind(this, i)} />\r\n                                    </div>\r\n                                    <div className=\"edit-button\" id={'remove' + i} onClick={this.removeEquation.bind(this, i)}>-</div>\r\n                                    {   // In case there is a message to display, pop it up\r\n                                        i === (this.state.equations.length - 1) ?\r\n                                            <div className=\"edit-button\" id=\"add\" onClick={this.addEquation.bind(this, i)}>+</div> : null\r\n                                    }\r\n                                </label>\r\n                            )\r\n                        }\r\n                        <label className=\"actions\">\r\n                            <div className=\"execute-button\" id=\"calculate\" onClick={this.handleSubmit}>\r\n                                Go\r\n                            </div>\r\n                        </label>\r\n                        <label>Output:</label>\r\n                        <textarea className=\"textarea\" value={this.state.calculationSteps} readOnly />\r\n                        {   // In case there is a message to display, pop it up\r\n                            this.state.message ? <MessageBox type={ this.state.messageType }\r\n                                                             message={this.state.message} /> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport {Router, Route, Switch } from 'react-router-dom';\nimport history from './common/history';\nimport EuclideanAlgorithmForm from './view/actions/euclidean-algorithm/index';\nimport GcdLcmForm from './view/actions/gcd-lcm-prime-factors/index';\nimport EulerForm from './view/actions/euler/index';\nimport ModularEquationsForm from './view/actions/modular-equations/index';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src=\"./logo192.png\" className=\"App-logo\" alt=\"logo\"/>\n                <label className='header-title'>Math Tools Calculator</label>\n            </div>\n\n            <Router history={history}>\n                <Switch>\n                    <Route exact path='/MathematicalTools/euclideanalgorithm' component={EuclideanAlgorithmForm}/>\n                    <Route exact path='/MathematicalTools/gcdlcm' component={GcdLcmForm}/>\n                    <Route exact path='/MathematicalTools/euler' component={EulerForm}/>\n                    <Route exact path='/MathematicalTools/modularequations' component={ModularEquationsForm}/>\n                </Switch>\n                <Tabs>\n                    <TabList>\n                        <Tab>\n                            <p>Euclid's Algorithm (Bezout)</p>\n                        </Tab>\n                        <Tab>\n                            <p>GCD, LCM and Prime Factors</p>\n                        </Tab>\n                        <Tab>\n                            <p>Euler Formula and Gauss Sum</p>\n                        </Tab>\n                        <Tab>\n                            <p>Modular Equations</p>\n                        </Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        <div className=\"panel-content\">\n                            <EuclideanAlgorithmForm/>\n                            <label className=\"copyright\"><br/>© All Rights ... wtf lol © RickShvetz © 2020-2021 ©</label>\n                        </div>\n                    </TabPanel>\n                    <TabPanel>\n                        <div className=\"panel-content\">\n                            <GcdLcmForm/>\n                            <label className=\"copyright\"><br/>© All Rights ... wtf lol © RickShvetz © 2020-2021 ©</label>\n                        </div>\n                    </TabPanel>\n                    <TabPanel>\n                        <div className=\"panel-content\">\n                            <EulerForm/>\n                            <label className=\"copyright\"><br/>© All Rights ... wtf lol © RickShvetz © 2020-2021 ©</label>\n                        </div>\n                    </TabPanel>\n                    <TabPanel>\n                        <div className=\"panel-content\">\n                            <ModularEquationsForm/>\n                            <label className=\"copyright\"><br/>© All Rights ... wtf lol © RickShvetz © 2020-2021 ©</label>\n                        </div>\n                    </TabPanel>\n                </Tabs>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}